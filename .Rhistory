bxp_prepandemic_mu03 <- ggboxplot(
dat_prepandemic_mu03_df, x = "group", y = "mu03",
color = "block", palette = "jco",
facet.by = "task", short.panel.labs = FALSE
)
bxp_prepandemic_mu03
# anova
prepandemic_mu03_aov <- anova_test(
data = dat_prepandemic_mu03_df, dv = mu03, wid = id,
within = block, between = c(task, group)
)
get_anova_table(prepandemic_mu03_aov)
# three-way mixed ANOVA: omega3
dat_prepandemic_omega3_df <- data.frame(id = 1:nrow(dat_prepandemic_df),
task = dat_prepandemic_df$task,
group = dat_prepandemic_df$group,
dat_prepandemic_df[, grepl("omega3_", names(dat_prepandemic_df))][1:2]
)
# gather block scores into long format
dat_prepandemic_omega3_df <- dat_prepandemic_omega3_df %>%
gather(key = "block", value = "omega3", omega3_1, omega3_2) %>%
convert_as_factor(id, block)
# simple visualization
bxp_prepandemic_omega3 <- ggboxplot(
dat_prepandemic_omega3_df, x = "group", y = "omega3",
color = "block", palette = "jco",
facet.by = "task", short.panel.labs = FALSE
)
bxp_prepandemic_omega3
# anova
prepandemic_omega3_aov <- anova_test(
data = dat_prepandemic_omega3_df, dv = omega3, wid = id,
within = block, between = c(task, group)
)
get_anova_table(prepandemic_omega3_aov)
# three-way mixed ANOVA: mu02
dat_prepandemic_mu02_df <- data.frame(id = 1:nrow(dat_prepandemic_df),
task = dat_prepandemic_df$task,
group = dat_prepandemic_df$group,
dat_prepandemic_df[, grepl("mu02_", names(dat_prepandemic_df))][1:2]
)
# gather block scores into long format
dat_prepandemic_mu02_df <- dat_prepandemic_mu02_df %>%
gather(key = "block", value = "mu02", mu02_1, mu02_2) %>%
convert_as_factor(id, block)
# simple visualization
bxp_prepandemic_mu02 <- ggboxplot(
dat_prepandemic_mu02_df, x = "group", y = "mu02",
color = "block", palette = "jco",
facet.by = "task", short.panel.labs = FALSE
)
bxp_prepandemic_mu02
# anova
prepandemic_mu02_aov <- anova_test(
data = dat_prepandemic_mu02_df, dv = mu02, wid = id,
within = block, between = c(task, group)
)
get_anova_table(prepandemic_mu02_aov)
# three-way mixed ANOVA: omega2
dat_prepandemic_omega2_df <- data.frame(id = 1:nrow(dat_prepandemic_df),
task = dat_prepandemic_df$task,
group = dat_prepandemic_df$group,
dat_prepandemic_df[, grepl("omega2_", names(dat_prepandemic_df))][1:2]
)
# gather block scores into long format
dat_prepandemic_omega2_df <- dat_prepandemic_omega2_df %>%
gather(key = "block", value = "omega2", omega2_1, omega2_2) %>%
convert_as_factor(id, block)
# simple visualization
bxp_prepandemic_omega2 <- ggboxplot(
dat_prepandemic_omega2_df, x = "group", y = "omega2",
color = "block", palette = "jco",
facet.by = "task", short.panel.labs = FALSE
)
bxp_prepandemic_omega2
# anova
prepandemic_omega2_aov <- anova_test(
data = dat_prepandemic_omega2_df, dv = omega2, wid = id,
within = block, between = c(task, group)
)
get_anova_table(prepandemic_omega2_aov)
# three-way mixed ANOVA: kappa
dat_prepandemic_kappa_df <- data.frame(id = 1:nrow(dat_prepandemic_df),
task = dat_prepandemic_df$task,
group = dat_prepandemic_df$group,
dat_prepandemic_df[, grepl("kappa2_", names(dat_prepandemic_df))][1:2]
)
# gather block scores into long format
dat_prepandemic_kappa_df <- dat_prepandemic_kappa_df %>%
gather(key = "block", value = "kappa", kappa2_1, kappa2_2) %>%
convert_as_factor(id, block)
# simple visualization
bxp_prepandemic_kappa <- ggboxplot(
dat_prepandemic_kappa_df, x = "group", y = "kappa",
color = "block", palette = "jco",
facet.by = "task", short.panel.labs = FALSE
)
bxp_prepandemic_kappa
# anova
prepandemic_kappa_aov <- anova_test(
data = dat_prepandemic_kappa_df, dv = kappa, wid = id,
within = block, between = c(task, group)
)
get_anova_table(prepandemic_kappa_aov)
# subset for pandemic data
dat_pandemic <- dat %>%
dplyr::filter((dat$dataset == "elife2020" | dat$dataset == "pandemic") & (dat$period == "prelockdown" |
dat$period == "lockdown" |
dat$period == "postlockdown"))
# calculate paranoia group - nonsocial/social
# extract scid from prelockdown, nonsocial group
nonsocial_pre_group <- as.data.frame(dat_pandemic[which(dat_pandemic$dataset == "elife2020"),]$scid_group)
colnames(nonsocial_pre_group) <- "group"
pandemic_dat <- dat_pandemic[-which(dat_pandemic$dataset == "elife2020"),]
pandemic_dat$paranoia_group <- ifelse(rowSums(pandemic_dat[, grepl("rgpts_per", names(pandemic_dat))], na.rm = TRUE) > 10, "high","low")
pandemic_group <- as.data.frame(pandemic_dat$paranoia_group)
colnames(pandemic_group) <- "group"
dat_pandemic$paranoia_group <- rbind(nonsocial_pre_group, pandemic_group)
# extract relevant features
dat_pandemic_df <- data.frame(period = dat_pandemic$period,
task = dat_pandemic$task_type,
group = dat_pandemic$paranoia_group,
dat_pandemic[, grepl("wsr_", names(dat_pandemic))],
dat_pandemic[, grepl("lsr_", names(dat_pandemic))],
dat_pandemic[, grepl("mu03_", names(dat_pandemic))],
dat_pandemic[, grepl("omega3_", names(dat_pandemic))],
dat_pandemic[, grepl("mu02_", names(dat_pandemic))],
dat_pandemic[, grepl("omega2_", names(dat_pandemic))],
dat_pandemic[, grepl("kappa2_", names(dat_pandemic))])
# three-way mixed ANOVA: WSR
dat_pandemic_wsr_df <- data.frame(id = 1:nrow(dat_pandemic_df),
period = dat_pandemic_df$period,
task = dat_pandemic_df$task,
group = dat_pandemic_df$group,
dat_pandemic_df[, grepl("wsr_", names(dat_pandemic_df))]
)
# gather block scores into long format
dat_pandemic_wsr_df <- dat_pandemic_wsr_df %>%
gather(key = "block", value = "wsr", wsr_block1, wsr_block2) %>%
convert_as_factor(id, block)
# simple visualization
bxp_pandemic_wsr <- ggboxplot(
dat_pandemic_wsr_df, x = "period", y = "wsr",
color = "block", palette = "jco",
facet.by = "task", short.panel.labs = FALSE
)
bxp_pandemic_wsr
# anova
pandemic_wsr_aov <- anova_test(
data = dat_pandemic_wsr_df, dv = wsr, wid = id,
within = block, between = c(task, period)
)
get_anova_table(pandemic_wsr_aov)
####################################################################################
# three-way mixed ANOVA: LSR
dat_pandemic_lsr_df <- data.frame(id = 1:nrow(dat_pandemic_df),
period = dat_pandemic_df$period,
task = dat_pandemic_df$task,
group = dat_pandemic_df$group,
dat_pandemic_df[, grepl("lsr_", names(dat_pandemic_df))]
)
# gather block scores into long format
dat_pandemic_lsr_df <- dat_pandemic_lsr_df %>%
gather(key = "block", value = "lsr", lsr_block1, lsr_block2) %>%
convert_as_factor(id, block)
# simple visualization
bxp_pandemic_lsr <- ggboxplot(
dat_pandemic_lsr_df, x = "period", y = "lsr",
color = "block", palette = "jco",
facet.by = "task", short.panel.labs = FALSE
)
bxp_pandemic_lsr
# anova
pandemic_lsr_aov <- anova_test(
data = dat_pandemic_lsr_df, dv = lsr, wid = id,
within = block, between = c(task, period)
)
get_anova_table(pandemic_lsr_aov)
# three-way mixed ANOVA: mu03
dat_pandemic_mu03_df <- data.frame(id = 1:nrow(dat_pandemic_df),
period = dat_pandemic_df$period,
task = dat_pandemic_df$task,
group = dat_pandemic_df$group,
dat_pandemic_df[, grepl("mu03_", names(dat_pandemic_df))][1:2]
)
# gather block scores into long format
dat_pandemic_mu03_df <- dat_pandemic_mu03_df %>%
gather(key = "block", value = "mu03", mu03_1, mu03_2) %>%
convert_as_factor(id, block)
# simple visualization
bxp_pandemic_mu03 <- ggboxplot(
dat_pandemic_mu03_df, x = "period", y = "mu03",
color = "block", palette = "jco",
facet.by = "task", short.panel.labs = FALSE
)
bxp_pandemic_mu03
# anova
pandemic_mu03_aov <- anova_test(
data = dat_pandemic_mu03_df, dv = mu03, wid = id,
within = block, between = c(task, period)
)
get_anova_table(pandemic_mu03_aov)
# three-way mixed ANOVA: omega3
dat_pandemic_omega3_df <- data.frame(id = 1:nrow(dat_pandemic_df),
period = dat_pandemic_df$period,
task = dat_pandemic_df$task,
group = dat_pandemic_df$group,
dat_pandemic_df[, grepl("omega3_", names(dat_pandemic_df))][1:2]
)
# gather block scores into long format
dat_pandemic_omega3_df <- dat_pandemic_omega3_df %>%
gather(key = "block", value = "omega3", omega3_1, omega3_2) %>%
convert_as_factor(id, block)
# simple visualization
bxp_pandemic_omega3 <- ggboxplot(
dat_pandemic_omega3_df, x = "period", y = "omega3",
color = "block", palette = "jco",
facet.by = "task", short.panel.labs = FALSE
)
bxp_pandemic_omega3
# anova
pandemic_omega3_aov <- anova_test(
data = dat_pandemic_omega3_df, dv = omega3, wid = id,
within = block, between = c(task, period)
)
get_anova_table(pandemic_omega3_aov)
# three-way mixed ANOVA: mu02
dat_pandemic_mu02_df <- data.frame(id = 1:nrow(dat_pandemic_df),
period = dat_pandemic_df$period,
task = dat_pandemic_df$task,
group = dat_pandemic_df$group,
dat_pandemic_df[, grepl("mu02_", names(dat_pandemic_df))][1:2]
)
# gather block scores into long format
dat_pandemic_mu02_df <- dat_pandemic_mu02_df %>%
gather(key = "block", value = "mu02", mu02_1, mu02_2) %>%
convert_as_factor(id, block)
# simple visualization
bxp_pandemic_mu02 <- ggboxplot(
dat_pandemic_mu02_df, x = "period", y = "mu02",
color = "block", palette = "jco",
facet.by = "task", short.panel.labs = FALSE
)
bxp_pandemic_mu02
# anova
pandemic_mu02_aov <- anova_test(
data = dat_pandemic_mu02_df, dv = mu02, wid = id,
within = block, between = c(task, period)
)
get_anova_table(pandemic_mu02_aov)
# three-way mixed ANOVA: omega2
dat_pandemic_omega2_df <- data.frame(id = 1:nrow(dat_pandemic_df),
period = dat_pandemic_df$period,
task = dat_pandemic_df$task,
group = dat_pandemic_df$group,
dat_pandemic_df[, grepl("omega2_", names(dat_pandemic_df))][1:2]
)
# gather block scores into long format
dat_pandemic_omega2_df <- dat_pandemic_omega2_df %>%
gather(key = "block", value = "omega2", omega2_1, omega2_2) %>%
convert_as_factor(id, block)
# simple visualization
bxp_pandemic_omega2 <- ggboxplot(
dat_pandemic_omega2_df, x = "period", y = "omega2",
color = "block", palette = "jco",
facet.by = "task", short.panel.labs = FALSE
)
bxp_pandemic_omega2
# anova
pandemic_omega2_aov <- anova_test(
data = dat_pandemic_omega2_df, dv = omega2, wid = id,
within = block, between = c(task, period)
)
get_anova_table(pandemic_omega2_aov)
# three-way mixed ANOVA: kappa
dat_pandemic_kappa_df <- data.frame(id = 1:nrow(dat_pandemic_df),
period = dat_pandemic_df$period,
task = dat_pandemic_df$task,
group = dat_pandemic_df$group,
dat_pandemic_df[, grepl("kappa2_", names(dat_pandemic_df))][1:2]
)
# gather block scores into long format
dat_pandemic_kappa_df <- dat_pandemic_kappa_df %>%
gather(key = "block", value = "kappa", kappa2_1, kappa2_2) %>%
convert_as_factor(id, block)
# simple visualization
bxp_pandemic_kappa <- ggboxplot(
dat_pandemic_kappa_df, x = "period", y = "kappa",
color = "block", palette = "jco",
facet.by = "task", short.panel.labs = FALSE
)
bxp_pandemic_kappa
# anova
pandemic_kappa_aov <- anova_test(
data = dat_pandemic_kappa_df, dv = kappa, wid = id,
within = block, between = c(task, period)
)
get_anova_table(pandemic_kappa_aov)
# set working directory
setwd("C:/Pandemic_2020/revisions/data")
# load libraries
library(dplyr)
library(ggplot2)
library(ggpubr)
#library(devtools)
#library(easyGgplot2)
#library(openintro)
#library(plotrix)
#library(gridExtra)
#library(tidyverse)
library(rstatix)
#install package ggpattern by:
#install.packages("remotes")                    # Install remotes package
#remotes::install_github("coolbutuseless/ggpattern")
#library("ggpattern")                           # Load ggpattern package
library(ggpattern)
library(lsr)
library(cowplot)
library(readr)
#source("D:\\GitHub\\covid19paranoia\\RainCloudPlots\\install.R")
source("D:\\GitHub\\covid19paranoia\\RainCloudPlots\\tutorial_R\\R_rainclouds.R") # source: https://github.com/RainCloudPlots/RainCloudPlots/tree/master/tutorial_R
source("D:\\GitHub\\covid19paranoia\\RainCloudPlots\\tutorial_R\\summarySE.R") # source: https://github.com/RainCloudPlots/RainCloudPlots/tree/master/tutorial_R
source("D:\\GitHub\\covid19paranoia\\RainCloudPlots\\tutorial_R\\simulateData.R") # source: https://github.com/RainCloudPlots/RainCloudPlots/tree/master/tutorial_R
source("D:\\GitHub\\covid19paranoia\\code\\theme_publication.R") # source: https://rpubs.com/Koundy/71792
# read data
dat <- read.csv('D:\\GitHub\\covid19paranoia\\data\\qualtricsPRL\\pandemicPRL.csv')
# subset for pandemic data
dat_pandemic <- dat[which(dat$dataset == "pandemic"),]
## calculate paranoia score
dat_pandemic$paranoia_score <- rowMeans(dat_pandemic[, grepl("rgpts_", names(dat_pandemic))], na.rm = TRUE)
# calculate paranoia grouping
dat_pandemic$paranoia_group <- ifelse(rowSums(dat_pandemic[, grepl("rgpts_per", names(dat_pandemic))], na.rm = TRUE) > 10, "high","low")
# order pandemic period variable
dat_pandemic$period <- factor(dat_pandemic$period, levels = c("prelockdown",
"lockdown",
"postlockdown"))
# Conduct one-way ANOVA for paranoia
aov1 <- aov(dat_pandemic$paranoia_score ~ dat_pandemic$period)
summary(aov1)
aov1_fig2a <- Anova(aov1, type = "II") # significant; p = 5.99e-07 ***
aov1_fig2a
# calculate partial eta squared
etaSquared(aov1, type = 2, anova = TRUE) # eta_sq_part = 0.053
# create a dataframe with only paranoia scores and period
dat_pandemic_df <- data.frame(period = dat_pandemic$period,
dat_pandemic[,grepl("_score", names(dat_pandemic))]
)
colnames(dat_pandemic_df) <- c("period","paranoia")
# add a group variable (there will be only 1 - i.e., paranoia group - but this code will accommodate for other groups)
df_fig2a <- dat_pandemic_df %>%
gather(key = "group",
value = "score", paranoia)
# compute summary statistics of paranoia by period
sumrepdat <- summarySE(df_fig2a, measurevar = "score", groupvars=c("group", "period"))
# Figure 2A
fig_2a <- ggplot(df_fig2a, aes(x = period,
y = score)
) +
geom_flat_violin(aes(fill = period),position = position_nudge(x = .2, y = 0), adjust = 1.5, trim = TRUE, alpha = .5, colour = NA)+
geom_point(aes(x = as.numeric(period)-.275, y = score, colour = period),position = position_jitter(width = .05), size = 1.5, shape = 21)+
geom_boxplot(aes(x = period, y = score, fill=period),
width = .3,
lwd = 1,
colour = "black")+
scale_colour_manual(values = c("#f2a097","#ed7669","#e84c3b"))+
scale_fill_manual(values = c("#f2a097","#ed7669","#e84c3b"))+
scale_x_discrete(labels=c("prelockdown" = "Pre-Lockdown", "lockdown" = "Lockdown",
"postlockdown" = "Post-Lockdown")) +
labs(title="", x="Pandemic period", y="Paranoia")
fig_2a + theme_Publication() + theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text = element_blank(),
axis.line = element_line(colour="black", size = 1.5),
axis.ticks = element_line(colour="black", size = 1.5),
legend.text = element_blank())
# create dataframe with relevant features
df_fig2b <- data.frame(period = dat_pandemic$period,
paranoia_score = dat_pandemic$paranoia_score,
paranoia_group = dat_pandemic$paranoia_group,
sabotage = dat_pandemic$sabotage_decks_avatars,
proactivity = dat_pandemic$state_proactivity,
mask_mandate = dat_pandemic$state_mask_mandate,
wsr = rowMeans(cbind(dat_pandemic$wsr_block1,dat_pandemic$wsr_block2)),
lsr = rowMeans(cbind(dat_pandemic$lsr_block1,dat_pandemic$lsr_block2)),
kappa = rowMeans(cbind(dat_pandemic$kappa2_1,dat_pandemic$kappa2_2)),
mu02 = rowMeans(cbind(dat_pandemic$mu02_1,dat_pandemic$mu02_2)),
mu03 = rowMeans(cbind(dat_pandemic$mu03_1,dat_pandemic$mu03_2)),
omega2 = rowMeans(cbind(dat_pandemic$omega2_1,dat_pandemic$omega2_2)),
omega3 = rowMeans(cbind(dat_pandemic$omega3_1,dat_pandemic$omega3_2))
)
# correctly order the factor variables
df_fig2b$period <- factor(df_fig2b$period, levels = c("prelockdown", "lockdown", "postlockdown"))
df_fig2b$paranoia_group <- factor(df_fig2b$paranoia_group, levels = c("low", "high"))
# create proactivity labeling based on median
df_fig2b$proactivity <- ifelse(df_fig2b$proactivity <= median(df_fig2b$proactivity,na.rm = TRUE), "less proactive","more proactive")
# create mask_mandate labeling
df_fig2b$mask_mandate <- ifelse(df_fig2b$mask_mandate == 0, "recommended","required")
df_fig2b$mask_mandate <- factor(df_fig2b$mask_mandate, levels = c("recommended","required"))
# pre-lockdown follows lockdown proactivity levels, post-lockdown proactivity based on mask-mandate status
proactivity_prelockdown_lockdown <- as.data.frame(df_fig2b[which(df_fig2b$period == "prelockdown" | df_fig2b$period == "lockdown"),]$proactivity)
colnames(proactivity_prelockdown_lockdown) <- "proactivity"
proactivity_postlockdown <- as.data.frame(df_fig2b[which(df_fig2b$period == "postlockdown"),]$mask_mandate)
proactivity_postlockdown <- ifelse(proactivity_postlockdown == "recommended","less proactive","more proactive")
colnames(proactivity_postlockdown) <- "proactivity"
proactivity <- rbind(proactivity_prelockdown_lockdown, proactivity_postlockdown)
# pre-lockdown follows mask_mandate status, post-lockdown proactivity based on mask_mandate status
proactivity_lock <- as.data.frame(df_fig2b[which(df_fig2b$period == "lockdown"),]$proactivity)
colnames(proactivity_lock) <- "proactivity_alternative"
proactivity_pre_post <- as.data.frame(df_fig2b[which(df_fig2b$period == "prelockdown" | df_fig2b$period == "postlockdown"),]$mask_mandate)
proactivity_pre_post <- ifelse(proactivity_pre_post == "recommended","less proactive","more proactive")
colnames(proactivity_pre_post) <- "proactivity_alternative"
proactivity_pre <- as.data.frame(proactivity_pre_post[1:130,])
colnames(proactivity_pre) <- "proactivity_alternative"
proactivity_pre_lock <- rbind(proactivity_pre,proactivity_lock)
proactivity_post <- as.data.frame(proactivity_pre_post[131:302,])
colnames(proactivity_post) <- "proactivity_alternative"
proactivity_alternative <- rbind(proactivity_pre_lock, proactivity_post)
# create new data frame with specific coding of proactivity
df <- data.frame(id = 1:nrow(df_fig2b),
period = df_fig2b$period,
proactivity,
proactivity_alternative,
sabotage = df_fig2b$sabotage,
paranoia_score = df_fig2b$paranoia_score,
paranoia_group = df_fig2b$paranoia_group,
wsr = df_fig2b$wsr,
lsr = df_fig2b$lsr,
mu02 = df_fig2b$mu02,
mu03 = df_fig2b$mu03,
kappa = df_fig2b$kappa,
omega2 = df_fig2b$omega2,
omega3 = df_fig2b$omega3)
fig2b_paranoia <- ggplot(df, aes(x = period,
y = paranoia_score,
fill=proactivity)) +
geom_boxplot_pattern(aes(fill=proactivity),pattern=c("stripe","none",
"stripe","none",
"stripe","none"),pattern_colour = "black",alpha = c(0.6, 0.6,
0.8, 0.8,
1.0, 1.0), lwd = 1) +
geom_point(shape=16,color="black",alpha=0.4,position = position_jitterdodge(0.5), show.legend = FALSE) +
scale_fill_manual(values = c("#f2a097","#e84c3b"))+
scale_x_discrete(labels=c("prelockdown" = "Pre-Lockdown", "lockdown" = "Lockdown",
"postlockdown" = "Post-Lockdown")) +
labs(title="", x="Pandemic period", y="Paranoia") +  guides(fill = guide_legend(override.aes = list(pattern=c("stripe","none")))
)
fig2b_paranoia + theme_Publication() +  theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text = element_blank(),
axis.line = element_line(colour="black", size = 1.5),
axis.ticks = element_line(colour="black", size = 1.5),
legend.text = element_blank(),
legend.position = "none")
# Two-way ANOVA
aov2_fig2b_paranoia <- aov(paranoia_score ~ proactivity * period, data = df)
summary(aov2_fig2b_paranoia)
Anova(aov2_fig2b_paranoia, type="III")
# calculate partial eta squared
etaSquared(aov2_fig2b_paranoia, type = 3, anova = TRUE)
# We observe a main effect of period [F(2,527) = 4.948, p=0.009, eta_sq_part = 0.018] and
# a significant interaction between the effects of proactivity and period on
# paranoia [F(2,527) = 4.785, p=0.009, eta_sq_part = 0.018]
TukeyHSD(aov2_fig2b_paranoia)
# two-sample t-test
df_lockdown <- df[which(df$period == "lockdown"),]
t.test(df_lockdown$paranoia_score ~ df_lockdown$proactivity,
mu=0,
alt="two.sided",
conf=0.95,
var.eq=F,
paired=F)
cohensD(paranoia_score ~ proactivity, data = df_lockdown)
# We observe a significant mean difference (mean[less_proactive]=0.773, mean[more_proactive]=0.468)
# of paranoia [t(229)=2.57, p=0.011, Cohen's d = 0.334, 95% CI=(0.071,0.539)] between
# less proactive and more proactive states
# in lockdown
fig2b_wsr <- ggplot(df, aes(x = period,
y = wsr,
fill=proactivity)) +
geom_boxplot_pattern(aes(fill=proactivity),pattern=c("stripe","none",
"stripe","none",
"stripe","none"),pattern_colour = "black",alpha = c(0.6, 0.6,
0.8, 0.8,
1.0, 1.0), lwd = 1
) +
geom_point(shape=16,color="black",alpha=0.4,position = position_jitterdodge(0.5), show.legend = FALSE) +
scale_fill_manual(values = c("#f2a097","#e84c3b"))+
scale_x_discrete(labels=c("prelockdown" = "Pre-Lockdown", "lockdown" = "Lockdown",
"postlockdown" = "Post-Lockdown")) +
labs(title="", x="Pandemic period", y="Paranoia") +  guides(fill = guide_legend(override.aes = list(pattern=c("stripe","none")))
)
fig2b_wsr + theme_Publication() + theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text = element_blank(),
axis.line = element_line(colour="black", size = 1.5),
axis.ticks = element_line(colour="black", size = 1.5),
legend.text = element_blank(),
legend.position = "none")
install.packages("plyr")
install.packages('ggpattern')
Sys.which("make")
Sys.which("make")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
Sys.which("make")
install.packages('ggpattern')
install.packages('ggpattern')
find.package("devtools")
install.packages("devtools")
library(devtools)
install.packages(devtools)
install.packages("devtools")
